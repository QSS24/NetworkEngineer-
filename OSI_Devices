SimpleOSI.sh
#! /bin/venv/bash 
Set -x && Set -E

cidr  = range(int(0:60)) 

ipadr = { re.match('+random_int(\d^4-5)+{1|2|3}\.\d*{2|3}\.\D{1|2|3}'g) }.cidr
SubMask[a-d]{1-4} = { re.Match'(random_int((1-5+^3-4){1|2|3}\.)+\d*((1-3|0)*{2}+\.)+'g }
setOpts = 

Declare Glogal: 
     Varlogs = '/urs/var/syslogs'.logFile
     Devicelogs = '/temp/dev/'.logFile
     BinLogs = '/usr/bin/'.logFile
     Servicelogs = '/usr/initd/'.logFile
     Etclogs = ' /etc/ssh/sshd_config '.logFile 



logFile = " (Date '%Y %M %D %H:M%:%S').log {print $1 ':' $2 ':' $3} | less && sort -nro tail 20 > $logFile.txt "

Daily = SDiff 

Cront -e 
* * 8 * * -exec nohup $All_Devices()

All_Devices() {
     Case $All_Devices in: 
          -f) 
               if 
               fi 
          
          esac 

     Check_Network() { 
          Network_config = ' Netstat -a 
          }

     tempDevices = ${ /usr/*.dev } print{f" $1 ':' $2 ':' $3 "}.log | grep -f in $tempDev } 
         While -z exit

     Check_Router() {
         RouterUP = ' sh router details | less && sort nr -10 print(f" $1 $2 ") '
             Echo " Check for interface and assign available ip address with variable length subnet \n
                    Shut down ethernet \n 
                    assign with Admin Distance then bring it back up" 
          
          Assign_EIGRB = ${ route ip $ipdr \n 
                         $SetSubnet if $SetSubnet == -z 
                         Then 
                         
                         Try: if Unique(ipdr) then 
                              
                
                     
         SetSubnet = { for a, b in $SetSubnet[a|b] do 
                       if a == random_int(1:255)       
               { for  $RouterUP do

          CheckOSPF = { sh OSPF briefs 
               }
     Check_ARP () { 
          Arps = Arp -la 
          }

     
         
         }
     }

     Check_VLAN() {
         CheckLan = ' sh ip interface details {print $1 $2 $3 $4 $5}.format( ... ) ' | -exec \n
                    Case $Checklan in: 
                         Try if Int[0:10] == none exit
                         esle : 
                              Int0) assign lan $ipdr
                              ;;
                              Int1) assign lan $ipdr
                              ;;
                              Int2) assign lan $ipdr
                              ;;
                         fi
                    esac 
                    
                    Assign vlan \n 
                    for etf in $vlan($eth(random(seq 1..10)) 

                   
                    
     }

     Check_Switch() {
         Switches = { show switchport details 
     }

     Check_interfaces() {
        MacAddress = { MaCChanger mac='Random(0-255) seq(1..3)'
     }

}
